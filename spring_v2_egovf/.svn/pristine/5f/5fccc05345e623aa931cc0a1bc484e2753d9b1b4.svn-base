package com.rdpanel.fo.mj.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;

import com.rdpanel.cmmn.SendMail;
import com.rdpanel.cmmn.SurveyUtil;
import com.rdpanel.cmmn.security.Panel;
import com.rdpanel.cmmn.security.SessionsPanel;
import com.rdpanel.cmmn.service.CmmnService;
import com.rdpanel.fo.mj.service.MemberJoinService;
import com.rdpanel.fo.mp.service.MyPageService;
import com.rdpanel.fo.sc.service.PanelSecurityService;
import com.webiz.util.MathUtil;
import com.webiz.util.StringUtil;

/**
* <pre>
* 1. 패키지명 : com.rdpanel.fo.mj.controller
* 2. 타입명 : memberJoinController.java
* 3. 작성일 : 2017. 10. 11.
* 4. 작성자 : JAMUGE
* 5. 설명 : 회원가입 Controller
* </pre>
 */
@Controller
public class MemberJoinController {

	static final Logger logger = LoggerFactory.getLogger(MemberJoinController.class);
	
	@Autowired SessionLocaleResolver localeResolver;

	@Autowired MessageSource messageSource;

    @Resource(name="cmmnService") 
    private CmmnService cmmnService;  
    
    @Resource(name="memberJoinService") 
    private MemberJoinService memberJoinService;
    
    @Resource(name="myPageService") 
    private MyPageService myPageService; 
    
    @Resource(name="panelSecurityService") 
    private PanelSecurityService panelSecurityService; 
    
    
    /**
    * <pre>
    * 1. 메소드명 : memberJoinStep1
    * 2. 작성일 : 2017. 10. 11.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 회원가입 약관동의
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping(value="/fo/mj/memberJoinStep1.do", method = RequestMethod.POST)
	public ModelAndView memberJoinStep1(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
		
		ModelAndView mv = new ModelAndView();
		
		return mv;
	}
    
    /**
    * <pre>
    * 1. 메소드명 : memberJoinStep2
    * 2. 작성일 : 2017. 10. 11.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 회원가입 추가정보
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping(value="/fo/mj/memberJoinStep2.do", method = RequestMethod.POST)
	public ModelAndView memberJoinStep2(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
		
		ModelAndView mv = new ModelAndView();
        
		/* 약관 동의 확인 */
		if(SessionsPanel.isJoinMem(request)){
			
	        String [] COMM_CD = new String [] { "PHONE1_CD", "OCCU_AREA", "VISIT_PREFER", "EMAIL_CD" };
	        
	        // 코드 목록
	        for(int i=0; i<COMM_CD.length; i++){
	        	commandMap.put("COMM_CD", COMM_CD[i]);
	        	mv.addObject(COMM_CD[i] +"_LIST", this.cmmnService.selectCmmnList(commandMap));
	        }
	        
	        /**
	         * [R&D 패널] 회원가입을 위한 세션정보가 없을 시에는
	         * [통합고객] 테이블에서 패널 상세정보를 데이터 바인딩을 한다.
	         */
	        // [통합고객] 테이블에서 패널 상세정보를 가져온다.
	        Map<String, Object> info = this.panelSecurityService.selectGetMstPanelInfo(request, commandMap);
	        
	        // [R&D 패널] 회원가입을 위한 세션
	        Map<String, Object> sessionInfo = SessionsPanel.getSessionMap(request, "__SESSION_JOIN_MEM__");

	        info.put("UCSTMID", StringUtil.getString(sessionInfo.get("SESSION_UCSTMID"), StringUtil.getString(info.get("UCSTMID"), "")) );
	        info.put("CSTMID", StringUtil.getString(sessionInfo.get("SESSION_CSTMID"), StringUtil.getString(info.get("CSTMID"), "")) );
	        info.put("USER_ID", StringUtil.getString(sessionInfo.get("SESSION_USER_ID"), StringUtil.getString(info.get("CSTMID"), "")) );
	        info.put("NAME", StringUtil.getString(sessionInfo.get("SESSION_NAME"), StringUtil.getString(info.get("CSTMNM"), "")) );
	        info.put("EMAIL", StringUtil.getString(sessionInfo.get("SESSION_EMAIL"), "") );
	        info.put("EMAIL1", StringUtil.getString(sessionInfo.get("SESSION_EMAIL1"), StringUtil.getString(info.get("EMAIL1"), "")) );
	        info.put("EMAIL2", StringUtil.getString(sessionInfo.get("SESSION_EMAIL2"), StringUtil.getString(info.get("EMAIL2"), "")) );
	        info.put("PHONE1", StringUtil.getString(sessionInfo.get("SESSION_PHONE1"), StringUtil.getString(info.get("MOBILENO1"), "")) );
	        info.put("PHONE2", StringUtil.getString(sessionInfo.get("SESSION_PHONE2"), StringUtil.getString(info.get("MOBILENO2"), "")) );
	        info.put("PHONE3", StringUtil.getString(sessionInfo.get("SESSION_PHONE3"), StringUtil.getString(info.get("MOBILENO3"), "")) );
	        info.put("YEAR", StringUtil.getString(sessionInfo.get("SESSION_YEAR"), StringUtil.getString(info.get("YEAR"), "")) );
	        info.put("MONTH", StringUtil.getDateReFmt(StringUtil.getString(sessionInfo.get("SESSION_MONTH"), StringUtil.getString(info.get("MONTH"), ""))) );
	        info.put("DAY", StringUtil.getDateReFmt(StringUtil.getString(sessionInfo.get("SESSION_DAY"), StringUtil.getString(info.get("DAY"), ""))) );
	        info.put("GENDER_CD", StringUtil.getString(sessionInfo.get("SESSION_GENDER_CD"), "") );
	        info.put("OCCU_AREA_CD", StringUtil.getString(sessionInfo.get("SESSION_OCCU_AREA_CD"), "") );
	        info.put("VISIT_PREFER_CD", StringUtil.getString(sessionInfo.get("SESSION_VISIT_PREFER_CD"), "") );
	        
	        mv.addObject("info", info);
	        mv.addObject("commandMap", commandMap);
	        
		}else{
    		//mv.addObject("alertMsg", messageSource.getMessage("return.error.000", null, "비정상적인 접근입니다.", (Locale) request.getAttribute("LOCALE_LANG")));
    		mv.addObject("alertMsg", "비정상적인 접근입니다.");
            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/mj/memberJoinStep1.do");
            mv.setViewName("/fo/common/result");
		}
		
		return mv;
	}
    
    /**
    * <pre>
    * 1. 메소드명 : panelCertProc
    * 2. 작성일 : 2017. 11. 6.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 아모레퍼시픽 도메인일 경우 > 사내패널인증 
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping(value="/fo/mj/panelCertProc.do", method = RequestMethod.POST)
    public ModelAndView panelCertProc(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	 
    	SendMail sendMail = new SendMail();
    	
    	Map<String, Object> returnMap = sendMail.SendSMTP(request, commandMap, "mail");
    	
    	if(returnMap != null)
    	{
    		//mv.addObject("alertMsg", messageSource.getMessage("memberJoin.000", null, "이메일을 성공적으로 보냈습니다.", (Locale) request.getAttribute("LOCALE_LANG")));
    		mv.addObject("alertMsg", "이메일을 성공적으로 보냈습니다.");
    		mv.addObject("randomNum", returnMap.get("randomNum"));
    	}
    	else
    	{
    		//mv.addObject("alertMsg", messageSource.getMessage("memberJoin.001", null, "이메일을 보내는 도중 실패했습니다.</br>이메일을 확인해주세요.", (Locale) request.getAttribute("LOCALE_LANG")));
    		mv.addObject("alertMsg", "이메일을 보내는 도중 실패했습니다.</br>이메일을 확인해주세요.");
    	}
        
    	return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : memberJoinStep3
    * 2. 작성일 : 2017. 10. 11.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 기초설문
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping(value="/fo/mj/memberJoinStep3.do", method = RequestMethod.POST)  
    public ModelAndView memberJoinStep3(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView();
    	
		/* 회원가입 세션 확인 */
    	if(SessionsPanel.isJoinMem(request)){
		
	        /**
	         * [R&D 패널] 회원가입을 위한 세션에 데이터 바인딩을 한다.
	         */
			Map<String, Object> panelInfo = new HashMap<String, Object>();
	        Map<String, Object> sessionInfo = SessionsPanel.getSessionMap(request, "__SESSION_JOIN_MEM__");
	        
	        /**
	         * 맨 처음 프로세스에서의 보안 및 추후 로그인/회원가입 로직 때문에 이와 같이 설정함.
	         * 
	         * STEP2에서 선택된 데이터를 우선 시하여 세팅하고, 그 값이 없을 경우
	         * 세션에 있는 데이터를 세팅하고 다시 세션에 저장한다.
	         */
			panelInfo.put("UCSTMID", StringUtil.getString(sessionInfo.get("SESSION_UCSTMID"), "") );
		    panelInfo.put("CSTMID", StringUtil.getString(sessionInfo.get("SESSION_CSTMID"), "") );
		    panelInfo.put("USER_ID", StringUtil.getString(sessionInfo.get("SESSION_USER_ID"), "") );
		    panelInfo.put("NAME", StringUtil.getString(StringUtil.getString(commandMap.get("NAME"), ""), StringUtil.getString(sessionInfo.get("SESSION_NAME"), "")) );
		    panelInfo.put("EMAIL", StringUtil.getString(StringUtil.getString(commandMap.get("EMAIL"), ""), StringUtil.getString(sessionInfo.get("SESSION_EMAIL"), "")) );
		    panelInfo.put("EMAIL1",StringUtil.getString(StringUtil.getString(commandMap.get("EMAIL1"), ""), StringUtil.getString(sessionInfo.get("SESSION_EMAIL1"), "")) );
		    panelInfo.put("EMAIL2", StringUtil.getString(StringUtil.getString(commandMap.get("EMAIL2"), ""), StringUtil.getString(sessionInfo.get("SESSION_EMAIL2"), "")) );
	        panelInfo.put("PHONE1", StringUtil.getString(StringUtil.getString(commandMap.get("PHONE1"), ""), StringUtil.getString(sessionInfo.get("SESSION_PHONE1"), "")) );
	        panelInfo.put("PHONE2", StringUtil.getString(StringUtil.getString(commandMap.get("PHONE2"), ""), StringUtil.getString(sessionInfo.get("SESSION_PHONE2"), "")) );
	        panelInfo.put("PHONE3", StringUtil.getString(StringUtil.getString(commandMap.get("PHONE3"), ""), StringUtil.getString(sessionInfo.get("SESSION_PHONE3"), "")) );
	        panelInfo.put("YEAR", StringUtil.getString(StringUtil.getString(commandMap.get("YEAR"), ""), StringUtil.getString(sessionInfo.get("SESSION_YEAR"), "")) );
	        panelInfo.put("MONTH", StringUtil.getDateReFmt(StringUtil.getString(commandMap.get("MONTH"), StringUtil.getString(sessionInfo.get("SESSION_MONTH"), ""))) );
	        panelInfo.put("DAY", StringUtil.getDateReFmt(StringUtil.getString(commandMap.get("DAY"), StringUtil.getString(sessionInfo.get("SESSION_DAY"), ""))) );
	        panelInfo.put("GENDER_CD", StringUtil.getString(StringUtil.getString(commandMap.get("GENDER_CD"), ""), StringUtil.getString(sessionInfo.get("SESSION_GENDER_CD"), "")) );
	        panelInfo.put("OCCU_AREA_CD", StringUtil.getString(StringUtil.getString(commandMap.get("OCCU_AREA_CD"), ""), StringUtil.getString(sessionInfo.get("SESSION_OCCU_AREA_CD"), "")) );
	        panelInfo.put("VISIT_PREFER_CD", StringUtil.getString(StringUtil.getString(commandMap.get("VISIT_PREFER_CD"), ""), StringUtil.getString(sessionInfo.get("SESSION_VISIT_PREFER_CD"), "")) );
			
			SessionsPanel.setSessionJoinMem(request, panelInfo);
			
			
			/**** 기초 설문 서베이 세팅 ***
			 * 기초설문/팀별설문을 IN절로 같이 가져와서 불러옴(step4 생략)
			 * 다른 설문조사와 다르게 따로 쿼리 작성
			 * 기초설문 SURVEY_SEQ
			 * 팀별설문 SURVEY_SEQ + 기초설문 MAX(SURVEY_SEQ)
			 * A.EXAM_MNG_NO IN ('1', '2')
		   	 * A.SURVEY_GBN IN ('01', '02')
		     * A.EXAM_ORDER = '1'
			 */
	 	 	// 설문 질문 목록 조회
	 		List<Map<String, Object>> QueList = null;
	 		QueList = this.memberJoinService.getQuestionList(commandMap);
	
	 		// 설문 보기 목록 조회
	 		List<Map<String, Object>> ExamList = null;
	 		ExamList = this.memberJoinService.getAnswerList(commandMap);
	    	
		 	// 설문조사 생성
	 		String SurveyTxt = SurveyUtil.makeSurvey(QueList, ExamList);
	 		/**** ********************* *** */
	 		
	 		/**** 답변 선택 서베이 세팅 *** */
			List<Map<String, Object>> AnswerList = null;
			AnswerList = this.memberJoinService.getAnswerChooseList(request, commandMap);
			
			// 임시 저장 시 해당 마지막 페이지
			String answerPageNum = "0";
			Map<String, Object> pageMap = this.memberJoinService.getAnswerChoosePageNum(request, commandMap);
			if(pageMap != null){
				answerPageNum = StringUtil.getString(pageMap.get("PAGE"), "1").replace("page", "");
			}
			mv.addObject("answerPageNum", answerPageNum);
			
			SurveyUtil surveyUtil = new SurveyUtil();
			String AnswerTxt = surveyUtil.makeAnswer(AnswerList);
			
			mv.addObject("AnswerTxt", AnswerTxt);
			/**** ********************* *** */
	 		 		  
	 		mv.addObject("basicSurveyTxt", SurveyTxt);
	 		mv.addObject("commandMap", commandMap);
	 		
		}else{
			//mv.addObject("alertMsg", messageSource.getMessage("return.error.000", null, "비정상적인 접근입니다.", (Locale) request.getAttribute("LOCALE_LANG")));
			mv.addObject("alertMsg", "비정상적인 접근입니다.");
            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/mj/memberJoinStep1.do");
            mv.setViewName("/fo/common/result");
		}
		
    	return mv;
    }
    
//    /**
//     * <pre>
//     * 1. 메소드명 : memberJoinStep4
//     * 2. 작성일 : 2017. 10. 11.
//     * 3. 작성자 : JAMUGE
//     * 4. 설명 : 팀별설문
//     * </pre>
//     * @param request
//     * @param commandMap
//     * @return
//     * @throws Exception
//     */
//    @RequestMapping(value="/fo/mj/memberJoinStep4.do", method = RequestMethod.POST)
//    public ModelAndView memberJoinStep4(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
//    	
//    	ModelAndView mv = new ModelAndView();
//		
//		/* 약관 동의 확인 */
//		if("Y".equals(StringUtil.getString(commandMap.get("termAgree"), "")) && "Y".equals(StringUtil.getString(commandMap.get("termAgree2"), ""))){
//			
//	    	/**** 팀별 설문 서베이 세팅 *** */
//			commandMap.put("PAST_EXAM_MNG_NO", "2");
//			commandMap.put("EXAM_MNG_NO", "2");
//	    	commandMap.put("SURVEY_GBN", "02");
//	    	commandMap.put("EXAM_ORDER", "1");
//	 	 
//	 	 	// 설문 질문 목록 조회
//	 		List<Map<String, Object>> QueList = null;
//	 		QueList = this.myPageService.getQuestionList(commandMap);
//	
//	 		// 설문 보기 목록 조회
//	 		List<Map<String, Object>> ExamList = null;
//	 		ExamList = this.myPageService.getAnswerList(commandMap);
//	 
//		 	// 설문조사 생성
//	 		String SurveyTxt = SurveyUtil.makeSurvey(QueList, ExamList);
//	 		/**** ********************* *** */
//	 		
//	 		/**** 답변 선택 서베이 세팅 *** */
//			List<Map<String, Object>> AnswerList = null;
//			AnswerList = this.myPageService.getAnswerChooseList(request, commandMap);
//			
//			SurveyUtil surveyUtil = new SurveyUtil();
//			String AnswerTxt = surveyUtil.makeAnswer(AnswerList);
//			
//			mv.addObject("AnswerTxt", AnswerTxt);
//			/**** ********************* *** */
//	 		 		  
//	 		mv.addObject("teamSurveyTxt", SurveyTxt);
//	 		mv.addObject("commandMap", commandMap);
//	 		
//		}else{
//    		mv.addObject("alertMsg", "비정상적인 접근입니다.");
//            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/mj/memberJoinStep1.do");
//            mv.setViewName("/fo/common/result");
//		}
//	 		
//    	return mv;
//    }
    
    /**
    * <pre>
    * 1. 메소드명 : memberJoinSave
    * 2. 작성일 : 2017. 10. 23.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 회원가입 등록
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
	@RequestMapping("/fo/mj/memberJoinSave.do")
    public ModelAndView memberJoinSave(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception 
    {
		logger.info("\n==========================================================================================");
		logger.info("\n=================================== 회원가입 등록 시작 ===================================");
		
    	ModelAndView mv = new ModelAndView();
    	
    	String errorMsg  = "";
    	String alertMsg  = "";
    	String returnUrl = request.getAttribute("webRootDomain") + "/fo/sc/login.do";
    	
        int result = 0;

        try
        {
	    	/**
	    	 * STEP 1 . 접근 URL 확인 (중복등록 방지)
	    	 */
	    	String refererUrl = StringUtil.getString(request.getHeader("referer"), "");
			if(refererUrl.indexOf("/fo/mj/memberJoinStep3") > -1 && SessionsPanel.isJoinMem(request)){
				
				Panel panel = new Panel();
				
				// 사내 패널 인증 FLAG
				panel.setPENRNR_CERT_FLAG(StringUtil.getString(commandMap.get("PENRNR_CERT_FLAG"), ""));	
				
	    		/**
	    		 * STEP 1-1 . 마스터 테이블 회원 정보 유무 조회 (CNT)
	    		 */
				result = this.memberJoinService.selectMstPanelCnt(request, panel);
				
				/**
				 * STEP 1-2 . 마스터 회원정보가 없을 시 > 최초 회원가입/임시저장 진행
				 */
				if(result < 1)
				{
					/**
					 * STEP 1-2-1 . 마스터 테이블 회원 등록 >> [selectKey] USER_MNG_NO
					 */
		    		result = this.memberJoinService.insertMstMyInfo(request, panel);
		    		panel.setUSER_MNG_NO(result);  // >> [selectKey] USER_MNG_NO
		    		logger.info("\n >> [selectKey] USER_MNG_NO : " + panel.getUSER_MNG_NO());
		    		
		    		/**
		    		 * STEP 1-2-2 . [selectKey] USER_MNG_NO 정상 일 경우
		    		 */
		    		if(result > 0)
		    		{
		    			/**
		    		     * STEP 1-2-2-1 . 패널서베이 관리 테이블에 패널 아이디 조회 (CNT)
		    		     */
		    		    result = this.memberJoinService.selectSurveyTablePanelIDCnt(request, commandMap);
		    		    
		    		    /**
		    		     * STEP 1-2-2-2 . 아이디 없을 경우 > 진행
		    		     */
		    		    if(result < 1)
		    		    {
		    		    	/**
			    		     * STEP 1-2-2-2-1 . 패널서베이 관리 테이블에 패널 아이디만 등록
			    		     */
			    		    result = this.memberJoinService.insertPanelID(request, commandMap);
					    	
			    		    /**
			    		     * STEP 1-2-2-2-2 . 정상적으로 처리 > 진행
			    		     */
					    	if(result > 0)
					    	{
					    		/**
					    		 * STEP 1-2-2-2-2-1 . 회원정보 데이터 바인딩 시작
					    		 */
					    		logger.info("\n ******************** [등록] 데이터 바인딩 시작 ********************");
					    	    Map<String, Object> sessionInfo = SessionsPanel.getSessionMap(request, "__SESSION_JOIN_MEM__");
					    	    logger.info("\n >> [sessionInfo] : " + sessionInfo);
					    	    
					    	    /**
					    	     * 사내 패널이 이메일 인증 후 사내 PERNR 조회
					    	     */
					    	    if("C".equals(StringUtil.getString(commandMap.get("PENRNR_CERT_FLAG"), ""))){
					    	    	commandMap.put("EMAIL", StringUtil.getString(sessionInfo.get("SESSION_EMAIL"), ""));
					    	    	Map<String, Object> panelId = this.memberJoinService.selectCertPernrId(request, commandMap);
					    	    	panel.setPERNR(StringUtil.getString(panelId.get("PERNR"), ""));
					    	    }
					    	    
					    	    // SESSION INFO
					    	    panel.setUSER_ID(StringUtil.getString(sessionInfo.get("SESSION_USER_ID"), "")); 
					    	    panel.setNAME(StringUtil.getString(sessionInfo.get("SESSION_NAME"), "")); 
					    	    panel.setEMAIL(StringUtil.getString(sessionInfo.get("SESSION_EMAIL"), "")); 
					    	    panel.setGENDER_CD(StringUtil.getString(sessionInfo.get("SESSION_GENDER_CD"), "")); 
					    	    panel.setOCCU_AREA_CD(StringUtil.getString(sessionInfo.get("SESSION_OCCU_AREA_CD"), "")); 
					    	    panel.setVISIT_PREFER_CD(StringUtil.getString(sessionInfo.get("SESSION_VISIT_PREFER_CD"), "")); 
					    	    
					    	    // PHONE
					    	    String phone1 = StringUtil.getString(sessionInfo.get("SESSION_PHONE1"), "");
					    	    String phone2 = StringUtil.getString(sessionInfo.get("SESSION_PHONE2"), "");
					    	    String phone3 = StringUtil.getString(sessionInfo.get("SESSION_PHONE3"), "");
					    	    
					    	    // BIRTH
					    	    String year = StringUtil.getString(sessionInfo.get("SESSION_YEAR"), "");
					    	    String month = StringUtil.getDateFmt(sessionInfo.get("SESSION_MONTH"));
					    	    String day = StringUtil.getDateFmt(sessionInfo.get("SESSION_DAY"));
					    	    
					    	    panel.setPHONE(phone1 + phone2 + phone3);
					    	    panel.setBIRTH(year + month + day);
					    	    
					    		// BMI 정보 계산
					    	    //if(!"".equals(StringUtil.getString(commandMap.get("WEIGHT"), "")) && !"".equals(StringUtil.getString(commandMap.get("HEIGHT"), "")))
					    	    //{
					    	    //	double WEIGHT = Double.parseDouble(StringUtil.getString(commandMap.get("WEIGHT"), "0"));
						    	//	double HEIGHT = Double.parseDouble(StringUtil.getString(commandMap.get("HEIGHT"), "0"));
						    	//	double BMI    = Math.round(WEIGHT / (HEIGHT * HEIGHT) * 10000 * 10) / 10.0;
						    	//	panel.setWEIGHT(WEIGHT);
						    	//	panel.setHEIGHT(HEIGHT);
						    	//	panel.setBMI(BMI);
					    	    //}
					    		
					    	    // COMPLETE: 저장
					    	    if("COMPLETE".equals(StringUtil.getString(commandMap.get("SAVE_TYPE"), "")))
					    	    {
					    	    	// Y: 설문조사/회원가입 완료
					    	    	panel.setSURVEY_COMPLETE_YN("Y");
					    	    }
					    	    else
					    	    {
					    	    	// N: 임시저장
					    	    	panel.setSURVEY_COMPLETE_YN("N");
					    	    }
					    		logger.info("\n ******************** [등록] 데이터 바인딩 종료 ********************");
					    		
					    		/**
					    		 * STEP 1-2-2-2-2-2 . 패널 회원정보 등록
					    		 */
			        			result = this.memberJoinService.insertMyInfo(request, panel);
					    		logger.info("\n >> 패널 회원정보 등록: " + result );
			        			
			        			/**
			        			 * STEP 1-2-2-2-2-3 . 회원가입/임시저장 성공
			        			 */
			        			if(result > 0)
			        			{
			        				if("Y".equals(panel.getSURVEY_COMPLETE_YN()))
			        				{
			        					//alertMsg  = messageSource.getMessage("memberJoin.002", null, "회원가입이 완료되었습니다.</br>로그인페이지로 다시 이동합니다.", locale);
			        					alertMsg  = "회원가입이 완료되었습니다.</br>로그인페이지로 다시 이동합니다.";
				        				returnUrl = request.getAttribute("webRootDomain") + "/fo/sc/login.do";
				        				
				        				// SMS 회원가입 메시지
				        				String msg = "";
				                		msg += "[아모레퍼시픽 고객연구센터] 회원가입이 완료되었습니다.\r\n";
				                		msg += "담당자 확인 후 연구 참여 정식 승인여부를 다시 메세지로 알려드리겠습니다.";
				                		
				                		commandMap.put("MSG", msg);
				                		commandMap.put("UCSTMID", panel.getUCSTMID());
				                		commandMap.put("PHONE", panel.getPHONE());
				                		commandMap.put("NAME", panel.getNAME());
				                		commandMap.put("SEND_GBN", "JOIN");  
				                		commandMap.put("AUTH_GBN", "02");
				                		
				                    	int txtByte = MathUtil.calStringToByte(msg);
				                    	if(txtByte < 91){ // 90byte 이하일 경우 SMS 전송
				                    		this.memberJoinService.sendSmsMessage(request, commandMap);	
				                    	}else{
				                    		this.memberJoinService.sendLmsMessage(request, commandMap);
				                    	}
				                    	commandMap.put("EXAM_MNG_NO", "0");
				                    	commandMap.put("USER_IDS", panel.getUSER_ID());
				                      	commandMap.put("SEND_TITLE", msg);
				                    	// SMS, Email 전송 이력 등록
				                    	this.memberJoinService.insertSmsHistory(request, commandMap);
				                    	
				        				// 회원가입 세션 삭제
				        				HttpSession session = request.getSession();
				        		        session.invalidate();
			        				}
			        				else
			        				{
			        					//alertMsg  = messageSource.getMessage("memberJoin.003", null, "설문 답변이 임시저장되었습니다.", locale);
			        					alertMsg  = "설문 답변이 임시저장되었습니다.";
				        				returnUrl = request.getAttribute("webRootDomain") + "/fo/mj/memberJoinStep3.do";
			        				}
			        			}
			        			/**
			        			 * STEP 1-2-2-2-2-4 . 회원가입 실패
			        			 */
			        			else
			        			{
			        				errorMsg = "MEM_JOIN_FAILED";
			        			}
					    	}
					    	/**
					    	 * STEP 1-2-2-2-3 . 패널서베이 정보 테이블에 패널 아이디만 등록 실패
					    	 */
					    	else
					    	{
					    		errorMsg = "TB_ID_INSERT_FAILED";
					    	}
				    	}
		    		    /**
		    		     * STEP 1-2-2-3 . 패널서베이정보 테이블에 아이디가 있을 경우 > 삭제 미처리 오류
		    		     */
		    		    else
		    		    {
		    		    	errorMsg = "TB_ID_NOT_DELETE";
				    	}
				    /**
				     * STEP 1-2-3 . [selectKey] USER_MNG_NO 데이터 오류
				     */
					}
		    		else
		    		{
		    			errorMsg = "MT_NO_NOT_EXIST";
					}
				}
				/**
				 * STEP 1-3 . 마스터 테이블 아이디 존재 > 임시저장 또는 이미 가입 상태
				 */
				else
				{
					Map<String, Object> panelInfo = this.memberJoinService.selectPanelInfo(request, panel);
		    		panel.setUSER_ID(panelInfo.get("USER_ID").toString());
		    		logger.info("\n >> [임시저장 상태] 상세정보 조회 panelInfo: " + panelInfo);
		    		
		    		/**
		    		 * STEP 1-3-1 . 임시 저장 상태
		    		 */
		    		if("N".equals(panelInfo.get("SURVEY_COMPLETE_YN")))
		    		{
		    			/**
			    		 * STEP 1-3-1-1 . 회원정보 데이터 바인딩 시작
			    		 */
			    		logger.info("\n ******************** [수정] 데이터 바인딩 시작 ********************");
			    	    Map<String, Object> sessionInfo = SessionsPanel.getSessionMap(request, "__SESSION_JOIN_MEM__");
			    	    logger.info("\n >> [sessionInfo] : " + sessionInfo);
			    	    
			    	    // SESSION INFO
			    	    panel.setUSER_ID(StringUtil.getString(sessionInfo.get("SESSION_USER_ID"), "")); 
			    	    panel.setNAME(StringUtil.getString(sessionInfo.get("SESSION_NAME"), "")); 
			    	    panel.setEMAIL(StringUtil.getString(sessionInfo.get("SESSION_EMAIL"), "")); 
			    	    panel.setGENDER_CD(StringUtil.getString(sessionInfo.get("SESSION_GENDER_CD"), "")); 
			    	    panel.setOCCU_AREA_CD(StringUtil.getString(sessionInfo.get("SESSION_OCCU_AREA_CD"), "")); 
			    	    panel.setVISIT_PREFER_CD(StringUtil.getString(sessionInfo.get("SESSION_VISIT_PREFER_CD"), "")); 
			    	    
			    	    // PHONE
			    	    String phone1 = StringUtil.getString(sessionInfo.get("SESSION_PHONE1"), "");
			    	    String phone2 = StringUtil.getString(sessionInfo.get("SESSION_PHONE2"), "");
			    	    String phone3 = StringUtil.getString(sessionInfo.get("SESSION_PHONE3"), "");
			    	    
			    	    // BIRTH
			    	    String year = StringUtil.getString(sessionInfo.get("SESSION_YEAR"), "");
			    	    String month = StringUtil.getDateFmt(sessionInfo.get("SESSION_MONTH"));
			    	    String day = StringUtil.getDateFmt(sessionInfo.get("SESSION_DAY"));
			    	    
			    	    panel.setPHONE(phone1 + phone2 + phone3);
			    	    panel.setBIRTH(year + month + day);
			    	    
			    		// BMI 정보 계산
			    	    //if(!"".equals(StringUtil.getString(commandMap.get("WEIGHT"), "")) && !"".equals(StringUtil.getString(commandMap.get("HEIGHT"), "")))
			    	    //{
			    	    //	double WEIGHT = Double.parseDouble(StringUtil.getString(commandMap.get("WEIGHT"), "0"));
				    	//	double HEIGHT = Double.parseDouble(StringUtil.getString(commandMap.get("HEIGHT"), "0"));
				    	//	double BMI    = Math.round(WEIGHT / (HEIGHT * HEIGHT) * 10000 * 10) / 10.0;
				    	//	panel.setWEIGHT(WEIGHT);
				    	//	panel.setHEIGHT(HEIGHT);
				    	//	panel.setBMI(BMI);
			    	    //}
			    		
			    	    // COMPLETE: 저장
			    	    if("COMPLETE".equals(StringUtil.getString(commandMap.get("SAVE_TYPE"), ""))){
			    	    	// Y: 설문조사/회원가입 완료
			    	    	panel.setSURVEY_COMPLETE_YN("Y");
			    	    }
			    	    else
			    	    {
			    	    	// N: 임시저장
			    	    	panel.setSURVEY_COMPLETE_YN("N");
			    	    }
			    		logger.info("\n ******************** [수정] 데이터 바인딩 종료 ********************");
		    			
			    		/**
			    		 * STEP 1-3-1-1 . 패널 회원정보 수정
			    		 */
	        			result = this.memberJoinService.updateMyInfo(request, panel);
			    		logger.info("\n >> 패널 회원정보 수정: " + result );
	        			
	        			/**
	        			 * STEP 1-3-1-2  . 회원가입/임시저장 성공
	        			 */
	        			if(result > 0)
	        			{
	        				if("Y".equals(panel.getSURVEY_COMPLETE_YN()))
	        				{
	        					//alertMsg  = messageSource.getMessage("memberJoin.002", null, "회원가입이 완료되었습니다.</br>로그인페이지로 다시 이동합니다.", locale);
	        					alertMsg  = "회원가입이 완료되었습니다.</br>로그인페이지로 다시 이동합니다.";
		        				returnUrl = request.getAttribute("webRootDomain") + "/fo/sc/login.do";
		        				
		        				// SMS 회원가입 메시지
		        				String msg = "";
		                		msg += "[아모레퍼시픽 고객연구센터] 회원가입이 완료되었습니다.\r\n";
		                		commandMap.put("MSG", msg);
		                		commandMap.put("UCSTMID", panel.getUCSTMID());
		                		commandMap.put("PHONE", panel.getPHONE());
		                		commandMap.put("NAME", panel.getNAME());
		                		commandMap.put("SEND_GBN", "JOIN");  
		                		commandMap.put("AUTH_GBN", "02");
		                		
		                    	int txtByte = MathUtil.calStringToByte(msg);
		                    	if(txtByte < 91){ // 90byte 이하일 경우 SMS 전송
		                    		this.memberJoinService.sendSmsMessage(request, commandMap);	
		                    	}else{ 
		                    		this.memberJoinService.sendLmsMessage(request, commandMap);
		                    	}
		                    	commandMap.put("EXAM_MNG_NO", "0");
		                      	commandMap.put("USER_IDS", panel.getUSER_ID());
		                      	commandMap.put("SEND_TITLE", msg);
		                    	// SMS, Email 전송 이력 등록
		                    	this.memberJoinService.insertSmsHistory(request, commandMap);
		                    	
		        				// 회원가입 세션 삭제
		        				//SessionsPanel.setSessionDelete(request, "__SESSION_JOIN_MEM__");
		        				HttpSession session = request.getSession();
		        		        session.invalidate();
	        				}
	        				else
	        				{
	        					//alertMsg  = messageSource.getMessage("memberJoin.003", null, "설문 답변이 임시저장되었습니다.", locale);
	        					alertMsg  = "설문 답변이 임시저장되었습니다.";
		        				returnUrl = request.getAttribute("webRootDomain") + "/fo/mj/memberJoinStep3.do";
	        				}
	        			}
		    		}
		    		/**
		    		 * STEP 1-3-2 . 1년 후 기초설문/팀별설문 재설문 시
		    		 */
		    		else if("N".equals(commandMap.get("SURVEY_REG_FLAG")))
		    		{
		    			//alertMsg  = messageSource.getMessage("memberJoin.004", null, "기초설문 재설문에 성공하였습니다.</br>로그인페이지로 다시 이동합니다.", locale);
		    			alertMsg  = "기초설문 재설문에 성공하였습니다.</br>로그인페이지로 다시 이동합니다.";
        				returnUrl = request.getAttribute("webRootDomain") + "/fo/sc/login.do";
        				
        				// 회원가입 세션 삭제
        				//SessionsPanel.setSessionDelete(request, "__SESSION_JOIN_MEM__");
        				HttpSession session = request.getSession();
        		        session.invalidate();
		    		}
		    		/**
		    		 * STEP 1-3-3 . 이미 가입 상태(중복가입)
		    		 */
		    		else
		    		{
		    			errorMsg = "DT_ID_EXIST";
		    		}
				}
			}
			/**
			 * STEP 2 . 비정상적인 접근
			 */
			else
			{
				errorMsg = "MT_ID_EXIST";
			}
			
			if(!"".equals(errorMsg)){
				//alertMsg  = messageSource.getMessage("memberJoin.005", null, "회원가입에 실패했습니다. 처음부터 다시 시도해주세요.", locale);
				alertMsg  ="회원가입에 실패했습니다. 처음부터 다시 시도해주세요.";
			}
        }    
        catch(Exception e)
        {
            logger.error("\n #################### 회원가입 [Exception] ####################");
            logger.error(e.getMessage());
            logger.error("\n #################### 회원가입 [Exception] ####################");
            // 설문 삭제
            //commandMap.put("EXAM_TYPE", "BASIC_TYPE");
            //this.memberJoinService.deleteSurveyResult(request ,commandMap);
            
            //alertMsg  = messageSource.getMessage("memberJoin.006", null, "회원가입에 실패했습니다. 관리자에게 문의해주세요.", locale);
            alertMsg  = "회원가입에 실패했습니다. 관리자에게 문의해주세요.";
        }
		
		logger.info("\n >> 회원정보 [errorMsg] : " + errorMsg );
		logger.info("\n >> 회원정보 [alertMsg] : " + alertMsg );
		logger.info("\n=================================== 회원가입 등록 종료 ===================================");
		
    	mv.addObject("alertMsg" , alertMsg);
        mv.addObject("returnUrl", returnUrl);
        mv.setViewName("/fo/common/result");
        
    	return mv;
    }
	
	/**
    * <pre>
    * 1. 메소드명 : surveyResultDelete
    * 2. 작성일 : 2017. 10. 27.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 설문조사 일괄 삭제
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping("/fo/mj/surveyResultDelete.do")
   	public ModelAndView surveyResultDelete(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
   		ModelAndView mv = new ModelAndView("jsonView");
   		
   		int result = 0;
   		
   		// 기초설문/팀별설문
		if("BASIC_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
	    	//commandMap.put("EXAM_MNG_NO", "1");
	    	//commandMap.put("SURVEY_GBN", "01");
	    	//commandMap.put("EXAM_ORDER", "1");
		
	    // 팀별설문
		}else if("TEAM_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
			commandMap.put("EXAM_MNG_NO", "2");
	    	commandMap.put("SURVEY_GBN", "02");
	    	commandMap.put("EXAM_ORDER", "1");
	    	
	    // 상세설문
		}else if("DETAIL_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
		   	//commandMap.put("EXAM_MNG_NO", "해당");
	    	commandMap.put("SURVEY_GBN", "03");
	    	commandMap.put("EXAM_ORDER", "1");
			
		// 결과설문  
		}else if("RESULT_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
			//commandMap.put("EXAM_MNG_NO", "해당");
			commandMap.put("SURVEY_GBN", "04");
			//commandMap.put("EXAM_ORDER", "해당");

        // 선정설문(동의서) CHO_TYPE
    	}else if("CHO_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){ 
			/*
			 * 선정설문은 EXAM_MNG_NO = '3'으로 불어오고
			 * Answer를 등록 할때는 해당 시험 EXAM_MNG_NO으로 등록한다.
			 */
	    	//commandMap.put("EXAM_MNG_NO", "해당");
	    	commandMap.put("SURVEY_GBN", "05");
	    	commandMap.put("EXAM_ORDER", "1");
    	}
		
		result = this.memberJoinService.deleteSurveyResult(request ,commandMap);
		 
		mv.addObject("resultYn", result);

		return mv;
   	}
	       
    /**
    * <pre>
    * 1. 메소드명 : surveyResultInsert
    * 2. 작성일 : 2017. 10. 27.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 설문조사 등록
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping("/fo/mj/surveyResultInsert.do")
    public ModelAndView surveyResultInsert(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	List<Map<String, Object>> resultMap = null;
    	
    	int result = 0;
    	
    	// 기초설문
    	if("BASIC_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
    		commandMap.put("EXAM_MNG_NO", "1");
    		commandMap.put("SURVEY_GBN", "01");
    		commandMap.put("EXAM_ORDER", "1");
    		
        // 팀별설문
    	}else if("TEAM_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
    		commandMap.put("EXAM_MNG_NO", "2");
    		commandMap.put("SURVEY_GBN", "02");
    		commandMap.put("EXAM_ORDER", "1");
    		
        // 상세설문
    	}else if("DETAIL_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
    		//commandMap.put("EXAM_MNG_NO", "해당");
    		commandMap.put("SURVEY_GBN", "03");
    		commandMap.put("EXAM_ORDER", "1");
    		
		// 결과설문
    	}else if("RESULT_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
    		//commandMap.put("EXAM_MNG_NO", "해당");
    		commandMap.put("SURVEY_GBN", "04");
    		//commandMap.put("EXAM_ORDER", "해당");
    	
        // 선정설문(동의서)
    	}else if("CHO_TYPE".equals(StringUtil.getString(commandMap.get("EXAM_TYPE"), ""))){
			/*
			 * 선정설문은 EXAM_MNG_NO = '3'으로 불어오고
			 * Answer를 등록 할때는 해당 시험 EXAM_MNG_NO으로 등록한다.
			 */
	    	//commandMap.put("EXAM_MNG_NO", "해당");
    		commandMap.put("EXAM_MNG_TYPE_CD", "3");
	    	commandMap.put("SURVEY_GBN", "05");
	    	commandMap.put("EXAM_ORDER", "1");
    	}
    	
		/* 설문조사 확인 */
		if(!"".equals(StringUtil.getString(commandMap.get("surveyResult"), ""))){
			
			SurveyUtil surveyUtil = new SurveyUtil();
			resultMap = surveyUtil.getResultMap((String) commandMap.get("surveyResult"));
			//resultMap = getResultMap((String) commandMap.get("surveyResult"));
			
			commandMap.put("surveyResultListMap", resultMap);
			
			result = this.memberJoinService.insertSurveyResult(request ,commandMap);
		}
    	
    	mv.addObject("resultYn", result);
    	
    	return mv;
    }
}
