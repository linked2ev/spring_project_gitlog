package com.rdpanel.fo.mp.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;

import com.rdpanel.cmmn.DataUriConverter;
import com.rdpanel.cmmn.SurveyUtil;
import com.rdpanel.cmmn.security.Panel;
import com.rdpanel.cmmn.security.SessionsPanel;
import com.rdpanel.cmmn.service.CmmnService;
import com.rdpanel.fo.mp.service.MyPageService;
import com.webiz.util.StringUtil;

/**
* <pre>
* 1. 패키지명 : com.rdpanel.fo.mp.controller
* 2. 타입명 : MyPageController.java
* 3. 작성일 : 2017. 9. 24.
* 4. 작성자 : JAMUGE
* 5. 설명 : 마이페이지 Controller
* </pre>
 */
@Controller
public class MyPageController {
	
	static final Logger logger = LoggerFactory.getLogger(MyPageController.class);
	
	@Autowired SessionLocaleResolver localeResolver;

	@Autowired MessageSource messageSource;
	
    @Resource(name="cmmnService") 
    private CmmnService cmmnService;   
    
    @Resource(name="myPageService") 
    private MyPageService myPageService; 
    
    
	/**
	* <pre>
	* 1. 메소드명 : testApplicationHistoryList
	* 2. 작성일 : 2017. 9. 24.
	* 3. 작성자 : JAMUGE
	* 4. 설명 : 시험신청이력 조회 목록
	* </pre>
	* @param request
	* @param commandMap
	* @return
	* @throws Exception 
	 */
	@RequestMapping("/fo/mp/testApplicationHistoryList.do")
	public ModelAndView testApplicationHistoryList(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception{
		
		ModelAndView mv = new ModelAndView();
		
		//String [] COMM_CD = new String [] { Code.SURVEY_GBN, Code.TEST_PLAN, Code.VISIT_AREA};
        String [] COMM_CD = new String [] { "SURVEY_GBN", "TEST_PLAN", "VISIT_AREA" };
        
        // 코드 목록
        for(int i=0; i<COMM_CD.length; i++){
        	commandMap.put("COMM_CD", COMM_CD[i]);
        	mv.addObject(COMM_CD[i] +"_LIST", this.cmmnService.selectCmmnList(commandMap));
        }
        
		// 시험신청이력 조회 목록 갯수
        int listCnt = this.myPageService.selectTestApplicationHistoryListCnt(request, commandMap);
        
        List<Map<String, Object>> list = null;
        if (listCnt > 0){
        	
        	// 시험신청이력 조회 목록
    		list = this.myPageService.selectTestApplicationHistoryList(request, commandMap);
        }
       
        mv.addObject("listCnt", listCnt);
        mv.addObject("commandMap", commandMap);
        mv.addObject("list", list);
		 
		return mv;
	}
	
	/**
	* <pre>
	* 1. 메소드명 : testApplicationStatusList
	* 2. 작성일 : 2017. 9. 24.
	* 3. 작성자 : JAMUGE
	* 4. 설명 : 시험신청현황 목록
	* </pre>
	* @param request
	* @param commandMap
	* @return
	* @throws Exception
	 */
	@RequestMapping("/fo/mp/testApplicationStatusList.do")
	public ModelAndView testApplicationStatusList(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception{
		
		ModelAndView mv = new ModelAndView();
		
		//String [] COMM_CD = new String [] { Code.SURVEY_GBN, Code.TEST_PLAN, Code.VISIT_AREA};
        String [] COMM_CD = new String [] { "SURVEY_GBN", "TEST_PLAN", "VISIT_AREA" };
        
        // 코드 목록
        for(int i=0; i<COMM_CD.length; i++){
        	commandMap.put("COMM_CD", COMM_CD[i]);
        	mv.addObject(COMM_CD[i] +"_LIST", this.cmmnService.selectCmmnList(commandMap));
        }
        
		// 시험신청현황  목록 갯수
        int listCnt = this.myPageService.selectTestApplicationStatusListCnt(request, commandMap);
        
        List<Map<String, Object>> list = null;
        if (listCnt > 0){
        	
        	// 시험신청현황  목록
    		list = this.myPageService.selectTestApplicationStatusList(request, commandMap);
        }
        
        mv.addObject("listCnt", listCnt);
        mv.addObject("commandMap", commandMap);
        mv.addObject("list", list);
		 
		return mv;
	}
	
	/**
	* <pre>
	* 1. 메소드명 : visitTimeAjaxList
	* 2. 작성일 : 2017. 10. 12.
	* 3. 작성자 : JAMUGE
	* 4. 설명 : 시험신청 방문일 목록
	* </pre>
	* @param request
	* @param commandMap
	* @return
	* @throws Exception
	 */
	@RequestMapping("/fo/mp/visitTimeAjaxList.do")
    public ModelAndView visitTimeAjaxList(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	
        // 방문일 목록
    	if(!"".equals(StringUtil.getString(commandMap.get("EXAM_MNG_NO"), "")))
    	{  
    		mv.addObject("VISIT_TIME_LIST", this.myPageService.selectVisitTimeList(request, commandMap));
    	}
        
        return mv;
    }
	
	/**
	* <pre>
	* 1. 메소드명 : visitTimeAjaxSave
	* 2. 작성일 : 2017. 10. 10.
	* 3. 작성자 : JAMUGE
	* 4. 설명 : 시험신청 방문일 등록/수정
	* </pre>
	* @param request
	* @param commandMap
	* @return
	* @throws Exception
	 */
    @RequestMapping("/fo/mp/visitTimeAjaxSave.do")
    public ModelAndView visitTimeAjaxSave(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	
    	int result = 0;
    	String resultType = "";
    	
		if(!"".equals(StringUtil.getString(commandMap.get("EXAM_MNG_NO"), ""))){  
			
		 	// 방문일 기존 등록 유무 확인
	    	int checkCnt = this.myPageService.checkVisitTime(request, commandMap);
	    	
	    	// 수정
	    	if(checkCnt > 0){
	    		
	    		result = this.myPageService.updateVisitTime(request, commandMap);
	    		resultType = "수정";
	    	
    		// 등록
	    	}else{
	    		
	    		result = this.myPageService.insertVisitTime(request ,commandMap);
	    		resultType = "등록";
	    	}
		}
		
		mv.addObject("resultYn", result);
		mv.addObject("resultType", resultType);
        
        return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : resultSurveyAjaxView
    * 2. 작성일 : 2017. 10. 19.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 시험신청현황 목록 > 설문작성 상세정보(결과설문)
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
	@RequestMapping("/fo/mp/resultSurveyAjaxView.do")
    public ModelAndView resultSurveyAjaxView(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	
    	String answerTxt = "";
    	String surveyTxt = "";
    	
        /* EXAM_MNG_NO / EXAM_WAY_CD 확인 */
    	if(!"".equals(StringUtil.getString(commandMap.get("EXAM_MNG_NO"), "")) && !"".equals(StringUtil.getString(commandMap.get("EXAM_WAY_CD"), "")))
    	{  
    		Map<String, Object> data = null;
    		
    		// EXAM_WAY_CD > 01: 방문 일 때, 02: 온라인 일 때 
    		if("01".equals(StringUtil.getString(commandMap.get("EXAM_WAY_CD"), "")))
    		{
    			data = this.myPageService.selectVisitResultSurveyInfo(request, commandMap);
    			
    			/**** 결과 설문 서베이 세팅 *** */
    			commandMap.put("PAST_EXAM_MNG_NO", commandMap.get("EXAM_MNG_NO"));
    			commandMap.put("SURVEY_GBN", "04");
    			commandMap.put("EXAM_ORDER", data.get("EXAM_ORDER"));  // 해당 차수
    		}
    		// 온라인 일 때
    		else if("02".equals(StringUtil.getString(commandMap.get("EXAM_WAY_CD"), "")))
    		{
    			data = this.myPageService.selectOnlineResultSurveyInfo(request, commandMap);
    			
    			/**** 결과 설문 서베이 세팅 *** */
    			commandMap.put("PAST_EXAM_MNG_NO", commandMap.get("EXAM_MNG_NO"));
    			commandMap.put("SURVEY_GBN", "04");
    			commandMap.put("EXAM_ORDER", data.get("EXAM_ORDER"));  // 해당 차수
    		}
		 	  
    		// 결과설문 > 결과테이블 정보(첨부파일)
    		Map<String, Object> finishInfo = this.myPageService.selectResultSurveyFinishInfo(request, commandMap);
    		System.out.println(">> finishInfo: " + finishInfo);
    		mv.addObject("finishInfo", finishInfo);
    		 
	 	 	// 설문 질문 목록 조회
	 		List<Map<String, Object>> QueList = null;
	 		QueList = this.myPageService.getQuestionList(commandMap);
	 		
	 		// 설문 보기 목록 조회
	 		List<Map<String, Object>> ExamList = null;
	 		ExamList = this.myPageService.getAnswerList(commandMap);
	 		
	 		// 설문조사 생성
	 		surveyTxt = SurveyUtil.makeSurvey(QueList, ExamList);
	 		System.out.println(">> surveyTxt: " + surveyTxt);
	 		/**** ********************* *** */
	 		
	 		/**** 답변 선택 서베이 세팅 *** */
			List<Map<String, Object>> AnswerList = null;
			AnswerList = this.myPageService.getAnswerChooseList(request, commandMap);
			
			SurveyUtil surveyUtil = new SurveyUtil();
			answerTxt = surveyUtil.makeAnswer(AnswerList);
			
			mv.addObject("answerTxt", answerTxt);
			System.out.println(">> answerTxt: " + answerTxt);
			/**** ********************* *** */
			
			mv.addObject("surveyTxt", surveyTxt);
			mv.addObject("answerTxt", answerTxt);
			mv.addObject("data", data);
    	}
        
        return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : agreeSignAjaxView
    * 2. 작성일 : 2017. 11. 1.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 동의서서명 약관동의 조회
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
	@RequestMapping("/fo/mp/agreeSignAjaxView.do")
    public ModelAndView agreeSignAjaxView(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	
        /* EXAM_MNG_NO 확인 */
    	if(!"".equals(StringUtil.getString(commandMap.get("EXAM_MNG_NO"), "")))
    	{  
    		// 1. 참가동의서 내용(html) 및 선정기준동의서 포함 여부 조회 
    		Map<String, Object> infoData = this.myPageService.selectAgreeSignInfo(request, commandMap);
    		
    	    Date d = new Date();
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일");
	        infoData.put("AGREE_SIGN_DATE", sdf.format(d));
	        //System.out.println(">> 현재날짜 : "+ sdf.format(d));
    		
    		// 2. Y : 선정기준 포함 시
    		if("Y".equals(StringUtil.getString(infoData.get("AGREE_INCLUSION_YN"), "")))
    		{
		      	/**** 선정기준동의서 설문 서베이 세팅 *** */
    			/*
    			 * 선정설문은 EXAM_MNG_NO = '3'으로 불어오고
    			 * Answer를 등록 할때는 해당 시험 EXAM_MNG_NO으로 등록한다.
    			 */
		    	commandMap.put("PAST_EXAM_MNG_NO", "3");
		    	commandMap.put("SURVEY_GBN", "05");
		    	commandMap.put("EXAM_ORDER", "1");
		 	 
		 	 	// 설문 질문 목록 조회
		 		List<Map<String, Object>> QueList = null;
		 		QueList = this.myPageService.getQuestionList(commandMap);
		 		
		 		// 설문 보기 목록 조회
		 		List<Map<String, Object>> ExamList = null;
		 		ExamList = this.myPageService.getAnswerList(commandMap);
		 		
		 		// 설문조사 생성
		 		String SurveyTxt = SurveyUtil.makeSurvey(QueList, ExamList);
		 		mv.addObject("surveyTxt", SurveyTxt);
		 		System.out.println(">> [선정설문(동의서)] SurveyTxt: " + SurveyTxt);
		 		/**** ********************* *** */
		 		
		 		/**** 답변 선택 서베이 세팅 *** */
				List<Map<String, Object>> AnswerList = null;
				AnswerList = this.myPageService.getAnswerChooseList(request, commandMap);
				
				SurveyUtil surveyUtil = new SurveyUtil();
				String AnswerTxt = surveyUtil.makeAnswer(AnswerList);
				
				mv.addObject("answerTxt", AnswerTxt);
				System.out.println(">> [선정설문(동의서)] AnswerTxt: " + AnswerTxt);
				/**** ********************* *** */
    		}
    		
			mv.addObject("data", infoData);
    	}
        
        return mv;
    }
	
	/**
	* <pre>
	* 1. 메소드명 : agreeSignSave
	* 2. 작성일 : 2017. 11. 1.
	* 3. 작성자 : JAMUGE
	* 4. 설명 : 동의서 서명 저장
	* </pre>
	* @param request
	* @param commandMap
	* @return
	* @throws Exception
	 */
    @RequestMapping("/fo/mp/agreeSignSave.do")
    public ModelAndView agreeSignSave(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView("jsonView");
    	
    	int result = 0;
    	String agreeSignId = "";  // 사인 아이디
    	String webRootPath = "";  // 파일 상대 경로
    	
        /* EXAM_MNG_NO 확인 */
    	if(!"".equals(StringUtil.getString(commandMap.get("EXAM_MNG_NO"), "")))
    	{  
	    	/* USER_ID 확인 */
	    	if(SessionsPanel.isLogin(request))
	    	{	
	    		if(!"".equals(StringUtil.getString(commandMap.get("AGREE_SIGN_DATAURL"), "")))
	    		{
		    		Map<String, Object> panelInfo = SessionsPanel.getSessionMap(request, "__SESSION_PANEL_INFO__");
			    	commandMap.put("USER_ID", panelInfo.get("SESSION_USER_ID"));
			    	
			    	DataUriConverter duc = new DataUriConverter();
			    	Map<String, Object> returnMap = duc.fileUpload(request, commandMap, "sign");
			    	agreeSignId = (String) commandMap.get("AGREE_SIGN_ID");
			    	webRootPath = (String) returnMap.get("webRootPath");
			    	
			    	// 테이블 컬럼명, 데이터
			    	commandMap.put(agreeSignId, webRootPath);
			    	
			     	// 사인 조회
			    	result = this.myPageService.selectAgreeSignCnt(request, commandMap);
			    	
			    	if(result < 1)
			    	{
			    		// 선정기준동의서 사인 등록
			    		result = this.myPageService.insertAgreeSignSave(request, commandMap);
			    	}
			    	else
			    	{
			    		// 선정기준동의서 사인 수정
			    		result = this.myPageService.updateAgreeSignSave(request, commandMap);
			    	}
			    	System.out.println(">> [사인] result: " + result);
	    		}
	    	}
		}
		
		mv.addObject("AGREE_SIGN_DATAURL", commandMap.get("AGREE_SIGN_DATAURL"));
		mv.addObject("agreeSignId", agreeSignId);
		mv.addObject("webRootPath", webRootPath);
        
        return mv;
    }
	
    
    /**
    * <pre>
    * 1. 메소드명 : myInfo
    * 2. 작성일 : 2017. 10. 10.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 고객 상세정보
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping("/fo/mp/myInfo.do")
    public ModelAndView myInfo(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView();
		
        String [] COMM_CD = new String [] { "PHONE1_CD", "OCCU_AREA", "VISIT_PREFER", "EMAIL_CD" };
        
        // 코드 목록
        for(int i=0; i<COMM_CD.length; i++){
        	commandMap.put("COMM_CD", COMM_CD[i]);
        	mv.addObject(COMM_CD[i] +"_LIST", this.cmmnService.selectCmmnList(commandMap));
        }
        
        Map<String, Object> info = this.myPageService.selectMyInfo(request, commandMap);
        info.put("MONTH", StringUtil.getDateReFmt(info.get("MONTH")));
        info.put("DAY", StringUtil.getDateReFmt(info.get("DAY")));
        
        mv.addObject("info", info);
    	
    	return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : myInfoUpdate
    * 2. 작성일 : 2017. 10. 11.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 고객 정보 수정
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping("/fo/mp/myInfoUpdate.do")
    public ModelAndView myInfoUpdate(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView();
    	
    	int result = 0;
    		
        /*  데이터 바인딩  */
        String phone = (String)commandMap.get("PHONE1") + (String)commandMap.get("PHONE2") + (String)commandMap.get("PHONE3");
        commandMap.put("PHONE", phone);
        
        String birth = (String)commandMap.get("YEAR") + StringUtil.getDateFmt(commandMap.get("MONTH"))  + StringUtil.getDateFmt(commandMap.get("DAY"));
        commandMap.put("BIRTH", birth);
        
        result = this.myPageService.updateMyInfo(request, commandMap);
    	
    	// 수정 성공 시
		if(result > 0){
    		// mv.addObject("alertMsg", messageSource.getMessage("myPage.000", null, "회원정보를 변경했습니다.", locale));
    		mv.addObject("alertMsg", "회원정보를 변경했습니다.");
            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/mn/panelMainIndex.do");
            mv.setViewName("/fo/common/result");
            
		}else{
			// mv.addObject("alertMsg", messageSource.getMessage("myPage.000", null, "회원정보 변경에 실패했습니다.", locale));
			mv.addObject("alertMsg", "회원정보 변경에 실패했습니다.");
            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/mn/panelMainIndex.do");
            mv.setViewName("/fo/common/result");
		}
    	
    	return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : memberLeave
    * 2. 작성일 : 2017. 10. 17.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 회원 탈퇴
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping("/fo/mp/memberLeave.do")
    public ModelAndView memberLeave(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView();
    	
    	return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : memberLeaveProc
    * 2. 작성일 : 2017. 10. 17.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 회원 탈퇴 처리
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping("/fo/mp/memberLeaveProc.do")
    public ModelAndView memberLeaveProc(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception 
    {
		logger.info("\n =======================================================================================");
		logger.info("\n ==================================== 회원탈퇴 시작 ====================================");
		
    	ModelAndView mv = new ModelAndView();
    	
    	String errorMsg = "";
    	String alertMsg = "";
    	String returnUrl = request.getAttribute("webRootDomain") + "/fo/mn/panelMainIndex.do";
    	
    	/**
    	 * STEP 1 . 회원탈퇴 약관 확인
    	 */
    	if("Y".equals(StringUtil.getString(commandMap.get("rschAgree"), "N")))
    	{
    		/**
    		 * STEP 1-1 . 세션 확인
    		 */
    		if(SessionsPanel.isLogin(request))
    		{
    			/**
    			 *  STEP 1-1-1 . 현재 진행 중인 시험(+60일) 존재 유무 확인
    			 */
    			int examCnt = this.myPageService.selectMyExamProceedingCnt(request, commandMap);
    			logger.info("\n >> [R&D 패널] 패널 현재 진행 중인 시험 examCnt: " + examCnt);
    			
    			if(examCnt < 1)
    			{
	        		int result = 0;
	        		Map<String, Object> info = null;
	        		Panel panel = new Panel();
	        		
	        		/**
	        		 * STEP 1-1-1-1 . 마스터테이블 패널 상세정보
	        		 */
	        		info = this.myPageService.selectMstMyInfo(request, commandMap);
	        		panel.setUCSTMID(StringUtil.getString(info.get("UCSTMID"), ""));
	        		
	           		/**
	        		 * STEP 1-1-1-2 . 패널 상세정보
	        		 */
	        		info = this.myPageService.selectMyInfo(request, commandMap);
	        		panel.setGENDER_CD(StringUtil.getString(info.get("GENDER_CD"), ""));
	        		panel.setAGE(StringUtil.getString(info.get("AGE"), ""));
	        		
	        		/**
	        		 * STEP 1-1-1-3 . UCSTMID 값 확인
	        		 */
	        		if(!"".equals(panel.getUCSTMID()))
	        		{
        				/**
            			 * STEP 1-1-1-3-1-1 . 회원탈퇴 테이블 등록 / 탈퇴회원 정보 삭제
            			 */
            			result = this.myPageService.insertMemberLeave(request, panel);
            			logger.info("\n >> [R&D 패널] 패널 회원탈퇴 result: " + result);
            			
            			/**
            			 * STEP 1-1-1-3-2 . 정상적으로 회원 탈퇴
            			 */
                		if(result > 0)
                		{
                			//alertMsg = messageSource.getMessage("myPage.002", null, "정상적으로 회원탈퇴 되었습니다.</br>2주 이내에는 탈퇴 신청 취소가 가능합니다.", (Locale) request.getAttribute("LOCALE_LANG"));
                			alertMsg = "정상적으로 회원탈퇴 되었습니다.";
            				returnUrl = request.getAttribute("webRootDomain") + "/fo/sc/login.do";
            				
            				// 세션 삭제
            				SessionsPanel.setSessionDelete(request, "__SESSION_PANEL_INFO__");
                		}
                		/**
                		 * STEP 1-1-1-3-2 . 회원 탈퇴 실패
                		 */
                		else
                		{
                			errorMsg = "TB_ID_INSERT_FAILED";
                		}
	        		}
	          		/**
	        		 * STEP 1-1-1-4 . UCSTMID 값 없음
	        		 */
	        		else
	        		{
	        			errorMsg = "DATA_NULL_ID";
	        		}
    			}
    			/**
    			 * STEP 1-1-2 . 현재 진행중인 시험 존재(+60일) > 회원탈퇴 불가
    			 */
    			else
    			{
    				//errorMsg = "PROCEEDING_EXAM_CNT";
    				//alertMsg = messageSource.getMessage("myPage.003", null, "회원님께서는 현재 진행중인 시험이 존재합니다.</br> (또한, 시험신청 후60일 경과가 되어야 합니다.)", (Locale) request.getAttribute("LOCALE_LANG"));
    				alertMsg = "회원님께서는 현재 진행중인 시험이 존재합니다.</br> (또한, 시험신청 후60일 경과가 되어야 합니다.)";
    			}
        	}
    		/**
    		 * STEP 1-2 . 세션 NULL
    		 */
    		else
        	{
    			errorMsg = "DATA_NULL_SESSION";
        	}
    	}
    	/**
    	 * STEP 2 . 회원탈퇴 약관 동의 미선택
    	 */
    	else
    	{
    		errorMsg = "DATA_NULL_AGREE";
    	}
    	
		logger.info("\n >> [R&D 패널] 패널 회원탈퇴 실패 errorMsg: " + errorMsg);
		
		if(!"".equals(errorMsg)){
			//alertMsg = messageSource.getMessage("myPage.004", null, "회원탈퇴에 실패했습니다. 처음부터 다시 시도해주세요.", (Locale) request.getAttribute("LOCALE_LANG"));
			alertMsg = "회원탈퇴에 실패했습니다. 처음부터 다시 시도해주세요.";
		}
		
    	mv.addObject("alertMsg", alertMsg);
    	mv.addObject("returnUrl", returnUrl);
    	mv.setViewName("/fo/common/result");
    	
		logger.info("\n ==================================== 회원탈퇴 종료 ====================================");
    	
    	return mv;
    }
    
    /**
    * <pre>
    * 1. 메소드명 : memberRecoveryProc
    * 2. 작성일 : 2017. 11. 13.
    * 3. 작성자 : JAMUGE
    * 4. 설명 : 회원탈퇴 복구 처리
    * </pre>
    * @param request
    * @param commandMap
    * @return
    * @throws Exception
     */
    @RequestMapping(value="/fo/mp/memberRecoveryProc.do", method = RequestMethod.POST)
    public ModelAndView memberRecoveryProc(HttpServletRequest request, @RequestParam Map<String, Object> commandMap) throws Exception {
    	
    	ModelAndView mv = new ModelAndView();
    	
    	int result = 0;

    	/* USER_ID 확인 */
    	if(!"".equals(StringUtil.getString(commandMap.get("LEAVE_USER_ID"), "")))
    	{
			result = this.myPageService.deleteMemberRecovery(request, commandMap);
			logger.info("\n >> [R&D 패널] 패널 회원복구 result: " + result);
			
			//mv.addObject("alertMsg", messageSource.getMessage("myPage.005", null, "회원복구에 성공했습니다. 다시 로그인 해주세요.", (Locale) request.getAttribute("LOCALE_LANG")));
			mv.addObject("alertMsg", "회원복구에 성공했습니다. 다시 로그인 해주세요.");
            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/sc/login.do");
            mv.setViewName("/fo/common/result");
    	}
    	else
    	{
    		//mv.addObject("alertMsg", messageSource.getMessage("myPage.006", null, "회원복구에 실패했습니다. 문제가 계속 되면 관리자에게 문의해주세요.", (Locale) request.getAttribute("LOCALE_LANG")));
    		mv.addObject("alertMsg", "회원복구에 실패했습니다. 문제가 계속 되면 관리자에게 문의해주세요.");
            mv.addObject("returnUrl", request.getAttribute("webRootDomain") + "/fo/sc/login.do");
            mv.setViewName("/fo/common/result");
    	}
    	
    	return mv;
    }
    
    
}
